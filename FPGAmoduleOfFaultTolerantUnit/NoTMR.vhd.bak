----------------------------------------------------------------------
-- Блок NoTMR модуля FPGAmodule узла FaultTolerantUnit.
-- Резервирование функционального элемента не применяется.
-- Логика работы функционального элемента заключается в нахождении
-- контрольной суммы входной последовательности, рассчитанной
-- алгоритмом CRC32.
----------------------------------------------------------------------
-- Порождающий полином (31:0):
-- 1+x^1+x^2+x^4+x^5+x^7+x^8+x^10+x^11+x^12+x^16+x^22+x^23+x^26+x^32
----------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity NoTMR is
    port (
        -- тактовый сигнал
        clk : in std_logic;
		  
		  -- ручной запуск и остановка программы
		  start_stop : in std_logic;
		  
		  -- контрольная сумма входной последовательности, рассчитанная алгоритмом CRC32 (32-битное значение)
		  CRC32 : out std_logic_vector(31 downto 0);
		  
		  -- флаг, отображающий окончание работы программы
		  program_completed: out std_logic := '0'
    );
end entity NoTMR;

architecture behavioral of NoTMR is
	-- регистр сдвига с линейной обратной связью (LFSR)
	signal LFSR : std_logic_vector(31 downto 0) := (others => '0');
	
	-- входная последовательность
	signal data : std_logic_vector(31 downto 0);
	
	-- начальное 32-битное значение входной последовательностие (0...01) [внутренний сигнал]
	signal internal_data : std_logic_vector(31 downto 0) := (31 downto 1 => '0', 0 => '1');
	
	-- контрольная сумма входной последовательности, рассчитанная алгоритмом CRC32 (32-битное значение)
	--signal CRC32 : std_logic_vector(31 downto 0);
	
	-- смены состояния программы (запуск и окончание) [внутренний сигнал]
	signal internal_start_stop : std_logic := '0';
begin
	process(start_stop)
		begin
			if (start_stop = '1') then
				internal_start_stop <= not internal_start_stop;
			end if;
	end process;
	
	process(clk)
		begin
			if rising_edge(clk) then
				if internal_start_stop = '1' then
					if (internal_data = "00000000000000000000000000000100") then
						internal_data <= (others => 'U');
						program_completed <= '1';
					elsif not(internal_data = "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU") then
						internal_data <= internal_data + 1;
					end if;
				end if;
			end if;
	end process;
	
	data <= internal_data;
	
	process (clk)
		begin
			if rising_edge(clk) then
				if internal_start_stop = '1' then
					-- вычисление CRC32 с использованием LFSR
					CRC32(0) <= LFSR(0) xor LFSR(6) xor LFSR(9) xor LFSR(10) xor LFSR(12) xor LFSR(16) xor LFSR(24) xor LFSR(25) xor LFSR(26) xor LFSR(28) xor LFSR(29) xor LFSR(30) xor LFSR(31) xor data(0) xor data(6) xor data(9) xor data(10) xor data(12) xor data(16) xor data(24) xor data(25) xor data(26) xor data(28) xor data(29) xor data(30) xor data(31);
					CRC32(1) <= LFSR(0) xor LFSR(1) xor LFSR(6) xor LFSR(7) xor LFSR(9) xor LFSR(11) xor LFSR(12) xor LFSR(13) xor LFSR(16) xor LFSR(17) xor LFSR(24) xor LFSR(27) xor LFSR(28) xor data(0) xor data(1) xor data(6) xor data(7) xor data(9) xor data(11) xor data(12) xor data(13) xor data(16) xor data(17) xor data(24) xor data(27) xor data(28);
					CRC32(2) <= LFSR(0) xor LFSR(1) xor LFSR(2) xor LFSR(6) xor LFSR(7) xor LFSR(8) xor LFSR(9) xor LFSR(13) xor LFSR(14) xor LFSR(16) xor LFSR(17) xor LFSR(18) xor LFSR(24) xor LFSR(26) xor LFSR(30) xor LFSR(31) xor data(0) xor data(1) xor data(2) xor data(6) xor data(7) xor data(8) xor data(9) xor data(13) xor data(14) xor data(16) xor data(17) xor data(18) xor data(24) xor data(26) xor data(30) xor data(31);
					CRC32(3) <= LFSR(1) xor LFSR(2) xor LFSR(3) xor LFSR(7) xor LFSR(8) xor LFSR(9) xor LFSR(10) xor LFSR(14) xor LFSR(15) xor LFSR(17) xor LFSR(18) xor LFSR(19) xor LFSR(25) xor LFSR(27) xor LFSR(31) xor data(1) xor data(2) xor data(3) xor data(7) xor data(8) xor data(9) xor data(10) xor data(14) xor data(15) xor data(17) xor data(18) xor data(19) xor data(25) xor data(27) xor data(31);
					CRC32(4) <= LFSR(0) xor LFSR(2) xor LFSR(3) xor LFSR(4) xor LFSR(6) xor LFSR(8) xor LFSR(11) xor LFSR(12) xor LFSR(15) xor LFSR(18) xor LFSR(19) xor LFSR(20) xor LFSR(24) xor LFSR(25) xor LFSR(29) xor LFSR(30) xor LFSR(31) xor data(0) xor data(2) xor data(3) xor data(4) xor data(6) xor data(8) xor data(11) xor data(12) xor data(15) xor data(18) xor data(19) xor data(20) xor data(24) xor data(25) xor data(29) xor data(30) xor data(31);
					CRC32(5) <= LFSR(0) xor LFSR(1) xor LFSR(3) xor LFSR(4) xor LFSR(5) xor LFSR(6) xor LFSR(7) xor LFSR(10) xor LFSR(13) xor LFSR(19) xor LFSR(20) xor LFSR(21) xor LFSR(24) xor LFSR(28) xor LFSR(29) xor data(0) xor data(1) xor data(3) xor data(4) xor data(5) xor data(6) xor data(7) xor data(10) xor data(13) xor data(19) xor data(20) xor data(21) xor data(24) xor data(28) xor data(29);
					CRC32(6) <= LFSR(1) xor LFSR(2) xor LFSR(4) xor LFSR(5) xor LFSR(6) xor LFSR(7) xor LFSR(8) xor LFSR(11) xor LFSR(14) xor LFSR(20) xor LFSR(21) xor LFSR(22) xor LFSR(25) xor LFSR(29) xor LFSR(30) xor data(1) xor data(2) xor data(4) xor data(5) xor data(6) xor data(7) xor data(8) xor data(11) xor data(14) xor data(20) xor data(21) xor data(22) xor data(25) xor data(29) xor data(30);
					CRC32(7) <= LFSR(0) xor LFSR(2) xor LFSR(3) xor LFSR(5) xor LFSR(7) xor LFSR(8) xor LFSR(10) xor LFSR(15) xor LFSR(16) xor LFSR(21) xor LFSR(22) xor LFSR(23) xor LFSR(24) xor LFSR(25) xor LFSR(28) xor LFSR(29) xor data(0) xor data(2) xor data(3) xor data(5) xor data(7) xor data(8) xor data(10) xor data(15) xor data(16) xor data(21) xor data(22) xor data(23) xor data(24) xor data(25) xor data(28) xor data(29);
					CRC32(8) <= LFSR(0) xor LFSR(1) xor LFSR(3) xor LFSR(4) xor LFSR(8) xor LFSR(10) xor LFSR(11) xor LFSR(12) xor LFSR(17) xor LFSR(22) xor LFSR(23) xor LFSR(28) xor LFSR(31) xor data(0) xor data(1) xor data(3) xor data(4) xor data(8) xor data(10) xor data(11) xor data(12) xor data(17) xor data(22) xor data(23) xor data(28) xor data(31);
					CRC32(9) <= LFSR(1) xor LFSR(2) xor LFSR(4) xor LFSR(5) xor LFSR(9) xor LFSR(11) xor LFSR(12) xor LFSR(13) xor LFSR(18) xor LFSR(23) xor LFSR(24) xor LFSR(29) xor data(1) xor data(2) xor data(4) xor data(5) xor data(9) xor data(11) xor data(12) xor data(13) xor data(18) xor data(23) xor data(24) xor data(29);
					CRC32(10) <= LFSR(0) xor LFSR(2) xor LFSR(3) xor LFSR(5) xor LFSR(9) xor LFSR(13) xor LFSR(14) xor LFSR(16) xor LFSR(19) xor LFSR(26) xor LFSR(28) xor LFSR(29) xor LFSR(31) xor data(0) xor data(2) xor data(3) xor data(5) xor data(9) xor data(13) xor data(14) xor data(16) xor data(19) xor data(26) xor data(28) xor data(29) xor data(31);
					CRC32(11) <= LFSR(0) xor LFSR(1) xor LFSR(3) xor LFSR(4) xor LFSR(9) xor LFSR(12) xor LFSR(14) xor LFSR(15) xor LFSR(16) xor LFSR(17) xor LFSR(20) xor LFSR(24) xor LFSR(25) xor LFSR(26) xor LFSR(27) xor LFSR(28) xor LFSR(31) xor data(0) xor data(1) xor data(3) xor data(4) xor data(9) xor data(12) xor data(14) xor data(15) xor data(16) xor data(17) xor data(20) xor data(24) xor data(25) xor data(26) xor data(27) xor data(28) xor data(31);
					CRC32(12) <= LFSR(0) xor LFSR(1) xor LFSR(2) xor LFSR(4) xor LFSR(5) xor LFSR(6) xor LFSR(9) xor LFSR(12) xor LFSR(13) xor LFSR(15) xor LFSR(17) xor LFSR(18) xor LFSR(21) xor LFSR(24) xor LFSR(27) xor LFSR(30) xor LFSR(31) xor data(0) xor data(1) xor data(2) xor data(4) xor data(5) xor data(6) xor data(9) xor data(12) xor data(13) xor data(15) xor data(17) xor data(18) xor data(21) xor data(24) xor data(27) xor data(30) xor data(31);
					CRC32(13) <= LFSR(1) xor LFSR(2) xor LFSR(3) xor LFSR(5) xor LFSR(6) xor LFSR(7) xor LFSR(10) xor LFSR(13) xor LFSR(14) xor LFSR(16) xor LFSR(18) xor LFSR(19) xor LFSR(22) xor LFSR(25) xor LFSR(28) xor LFSR(31) xor data(1) xor data(2) xor data(3) xor data(5) xor data(6) xor data(7) xor data(10) xor data(13) xor data(14) xor data(16) xor data(18) xor data(19) xor data(22) xor data(25) xor data(28) xor data(31);
					CRC32(14) <= LFSR(2) xor LFSR(3) xor LFSR(4) xor LFSR(6) xor LFSR(7) xor LFSR(8) xor LFSR(11) xor LFSR(14) xor LFSR(15) xor LFSR(17) xor LFSR(19) xor LFSR(20) xor LFSR(23) xor LFSR(26) xor LFSR(29) xor data(2) xor data(3) xor data(4) xor data(6) xor data(7) xor data(8) xor data(11) xor data(14) xor data(15) xor data(17) xor data(19) xor data(20) xor data(23) xor data(26) xor data(29);
					CRC32(15) <= LFSR(3) xor LFSR(4) xor LFSR(5) xor LFSR(7) xor LFSR(8) xor LFSR(9) xor LFSR(12) xor LFSR(15) xor LFSR(16) xor LFSR(18) xor LFSR(20) xor LFSR(21) xor LFSR(24) xor LFSR(27) xor LFSR(30) xor data(3) xor data(4) xor data(5) xor data(7) xor data(8) xor data(9) xor data(12) xor data(15) xor data(16) xor data(18) xor data(20) xor data(21) xor data(24) xor data(27) xor data(30);
					CRC32(16) <= LFSR(0) xor LFSR(4) xor LFSR(5) xor LFSR(8) xor LFSR(12) xor LFSR(13) xor LFSR(17) xor LFSR(19) xor LFSR(21) xor LFSR(22) xor LFSR(24) xor LFSR(26) xor LFSR(29) xor LFSR(30) xor data(0) xor data(4) xor data(5) xor data(8) xor data(12) xor data(13) xor data(17) xor data(19) xor data(21) xor data(22) xor data(24) xor data(26) xor data(29) xor data(30);
					CRC32(17) <= LFSR(1) xor LFSR(5) xor LFSR(6) xor LFSR(9) xor LFSR(13) xor LFSR(14) xor LFSR(18) xor LFSR(20) xor LFSR(22) xor LFSR(23) xor LFSR(25) xor LFSR(27) xor LFSR(30) xor LFSR(31) xor data(1) xor data(5) xor data(6) xor data(9) xor data(13) xor data(14) xor data(18) xor data(20) xor data(22) xor data(23) xor data(25) xor data(27) xor data(30) xor data(31);
					CRC32(18) <= LFSR(2) xor LFSR(6) xor LFSR(7) xor LFSR(10) xor LFSR(14) xor LFSR(15) xor LFSR(19) xor LFSR(21) xor LFSR(23) xor LFSR(24) xor LFSR(26) xor LFSR(28) xor LFSR(31) xor data(2) xor data(6) xor data(7) xor data(10) xor data(14) xor data(15) xor data(19) xor data(21) xor data(23) xor data(24) xor data(26) xor data(28) xor data(31);
					CRC32(19) <= LFSR(3) xor LFSR(7) xor LFSR(8) xor LFSR(11) xor LFSR(15) xor LFSR(16) xor LFSR(20) xor LFSR(22) xor LFSR(24) xor LFSR(25) xor LFSR(27) xor LFSR(29) xor data(3) xor data(7) xor data(8) xor data(11) xor data(15) xor data(16) xor data(20) xor data(22) xor data(24) xor data(25) xor data(27) xor data(29);
					CRC32(20) <= LFSR(4) xor LFSR(8) xor LFSR(9) xor LFSR(12) xor LFSR(16) xor LFSR(17) xor LFSR(21) xor LFSR(23) xor LFSR(25) xor LFSR(26) xor LFSR(28) xor LFSR(30) xor data(4) xor data(8) xor data(9) xor data(12) xor data(16) xor data(17) xor data(21) xor data(23) xor data(25) xor data(26) xor data(28) xor data(30);
					CRC32(21) <= LFSR(5) xor LFSR(9) xor LFSR(10) xor LFSR(13) xor LFSR(17) xor LFSR(18) xor LFSR(22) xor LFSR(24) xor LFSR(26) xor LFSR(27) xor LFSR(29) xor LFSR(31) xor data(5) xor data(9) xor data(10) xor data(13) xor data(17) xor data(18) xor data(22) xor data(24) xor data(26) xor data(27) xor data(29) xor data(31);
					CRC32(22) <= LFSR(0) xor LFSR(9) xor LFSR(11) xor LFSR(12) xor LFSR(14) xor LFSR(16) xor LFSR(18) xor LFSR(19) xor LFSR(23) xor LFSR(24) xor LFSR(26) xor LFSR(27) xor LFSR(29) xor LFSR(31) xor data(0) xor data(9) xor data(11) xor data(12) xor data(14) xor data(16) xor data(18) xor data(19) xor data(23) xor data(24) xor data(26) xor data(27) xor data(29) xor data(31);
					CRC32(23) <= LFSR(0) xor LFSR(1) xor LFSR(6) xor LFSR(9) xor LFSR(13) xor LFSR(15) xor LFSR(16) xor LFSR(17) xor LFSR(19) xor LFSR(20) xor LFSR(26) xor LFSR(27) xor LFSR(29) xor LFSR(31) xor data(0) xor data(1) xor data(6) xor data(9) xor data(13) xor data(15) xor data(16) xor data(17) xor data(19) xor data(20) xor data(26) xor data(27) xor data(29) xor data(31);
					CRC32(24) <= LFSR(1) xor LFSR(2) xor LFSR(7) xor LFSR(10) xor LFSR(14) xor LFSR(16) xor LFSR(17) xor LFSR(18) xor LFSR(20) xor LFSR(21) xor LFSR(27) xor LFSR(28) xor LFSR(30) xor data(1) xor data(2) xor data(7) xor data(10) xor data(14) xor data(16) xor data(17) xor data(18) xor data(20) xor data(21) xor data(27) xor data(28) xor data(30);
					CRC32(25) <= LFSR(2) xor LFSR(3) xor LFSR(8) xor LFSR(11) xor LFSR(15) xor LFSR(17) xor LFSR(18) xor LFSR(19) xor LFSR(21) xor LFSR(22) xor LFSR(28) xor LFSR(29) xor LFSR(31) xor data(2) xor data(3) xor data(8) xor data(11) xor data(15) xor data(17) xor data(18) xor data(19) xor data(21) xor data(22) xor data(28) xor data(29) xor data(31);
					CRC32(26) <= LFSR(0) xor LFSR(3) xor LFSR(4) xor LFSR(6) xor LFSR(10) xor LFSR(18) xor LFSR(19) xor LFSR(20) xor LFSR(22) xor LFSR(23) xor LFSR(24) xor LFSR(25) xor LFSR(26) xor LFSR(28) xor LFSR(31) xor data(0) xor data(3) xor data(4) xor data(6) xor data(10) xor data(18) xor data(19) xor data(20) xor data(22) xor data(23) xor data(24) xor data(25) xor data(26) xor data(28) xor data(31);
					CRC32(27) <= LFSR(1) xor LFSR(4) xor LFSR(5) xor LFSR(7) xor LFSR(11) xor LFSR(19) xor LFSR(20) xor LFSR(21) xor LFSR(23) xor LFSR(24) xor LFSR(25) xor LFSR(26) xor LFSR(27) xor LFSR(29) xor data(1) xor data(4) xor data(5) xor data(7) xor data(11) xor data(19) xor data(20) xor data(21) xor data(23) xor data(24) xor data(25) xor data(26) xor data(27) xor data(29);
					CRC32(28) <= LFSR(2) xor LFSR(5) xor LFSR(6) xor LFSR(8) xor LFSR(12) xor LFSR(20) xor LFSR(21) xor LFSR(22) xor LFSR(24) xor LFSR(25) xor LFSR(26) xor LFSR(27) xor LFSR(28) xor LFSR(30) xor data(2) xor data(5) xor data(6) xor data(8) xor data(12) xor data(20) xor data(21) xor data(22) xor data(24) xor data(25) xor data(26) xor data(27) xor data(28) xor data(30);
					CRC32(29) <= LFSR(3) xor LFSR(6) xor LFSR(7) xor LFSR(9) xor LFSR(13) xor LFSR(21) xor LFSR(22) xor LFSR(23) xor LFSR(25) xor LFSR(26) xor LFSR(27) xor LFSR(28) xor LFSR(29) xor LFSR(31) xor data(3) xor data(6) xor data(7) xor data(9) xor data(13) xor data(21) xor data(22) xor data(23) xor data(25) xor data(26) xor data(27) xor data(28) xor data(29) xor data(31);
					CRC32(30) <= LFSR(4) xor LFSR(7) xor LFSR(8) xor LFSR(10) xor LFSR(14) xor LFSR(22) xor LFSR(23) xor LFSR(24) xor LFSR(26) xor LFSR(27) xor LFSR(28) xor LFSR(29) xor LFSR(30) xor data(4) xor data(7) xor data(8) xor data(10) xor data(14) xor data(22) xor data(23) xor data(24) xor data(26) xor data(27) xor data(28) xor data(29) xor data(30);
					CRC32(31) <= LFSR(5) xor LFSR(8) xor LFSR(9) xor LFSR(11) xor LFSR(15) xor LFSR(23) xor LFSR(24) xor LFSR(25) xor LFSR(27) xor LFSR(28) xor LFSR(29) xor LFSR(30) xor LFSR(31) xor data(5) xor data(8) xor data(9) xor data(11) xor data(15) xor data(23) xor data(24) xor data(25) xor data(27) xor data(28) xor data(29) xor data(30) xor data(31);
				end if;
			end if;
	end process;
end architecture behavioral;